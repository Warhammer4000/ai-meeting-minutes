/**
 * Utility to convert markdown to plain text for sharing platforms
 * that don't support markdown formatting (like WhatsApp, SMS, etc.)
 */

export class MarkdownProcessor {
  /**
   * Convert markdown to plain text while preserving structure
   */
  static toPlainText(markdown: string): string {
    let text = markdown;

    // Remove markdown headers but keep the text with proper spacing
    text = text.replace(/^#{1,6}\s+(.+)$/gm, '$1\n');

    // Convert bold text (**text** or __text__)
    text = text.replace(/\*\*(.*?)\*\*/g, '$1');
    text = text.replace(/__(.*?)__/g, '$1');

    // Convert italic text (*text* or _text_)
    text = text.replace(/\*(.*?)\*/g, '$1');
    text = text.replace(/_(.*?)_/g, '$1');

    // Convert inline code (`code`)
    text = text.replace(/`([^`]+)`/g, '$1');

    // Convert code blocks (```code```)
    text = text.replace(/```[\s\S]*?```/g, (match) => {
      return match.replace(/```/g, '').trim();
    });

    // Convert unordered lists (- item or * item)
    text = text.replace(/^[\s]*[-*+]\s+(.+)$/gm, '• $1');

    // Convert ordered lists (1. item)
    text = text.replace(/^[\s]*\d+\.\s+(.+)$/gm, (match, content, offset, string) => {
      // Count the current number in the list
      const beforeText = string.substring(0, offset);
      const listItems = beforeText.match(/^\s*\d+\.\s+/gm) || [];
      const number = listItems.length + 1;
      return `${number}. ${content}`;
    });

    // Convert blockquotes (> text)
    text = text.replace(/^>\s+(.+)$/gm, '"$1"');

    // Convert horizontal rules (--- or ***)
    text = text.replace(/^[-*]{3,}$/gm, '────────────────');

    // Convert links [text](url) to "text (url)"
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '$1 ($2)');

    // Clean up extra whitespace and normalize line breaks
    text = text.replace(/\n{3,}/g, '\n\n'); // Max 2 consecutive line breaks
    text = text.replace(/[ \t]+$/gm, ''); // Remove trailing spaces
    text = text.trim();

    return text;
  }

  /**
   * Create a formatted sharing message with metadata
   */
  static createShareMessage(title: string, summary: string, createdAt: Date): string {
    const plainTextSummary = this.toPlainText(summary);
    const formattedDate = createdAt.toLocaleDateString() + ' ' + 
      createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

    return `📝 ${title}

${plainTextSummary}

────────────────
Generated on ${formattedDate}
Powered by AI Meeting Minutes`;
  }

  /**
   * Create a shorter version for platforms with character limits
   */
  static createShortShareMessage(title: string, summary: string, maxLength: number = 1000): string {
    const plainTextSummary = this.toPlainText(summary);
    
    if (plainTextSummary.length <= maxLength - 100) { // Leave room for title and footer
      return `📝 ${title}\n\n${plainTextSummary}\n\n🤖 Generated by AI`;
    }

    // Truncate and add continuation indicator
    const truncatedSummary = plainTextSummary.substring(0, maxLength - 150) + '...';
    return `📝 ${title}\n\n${truncatedSummary}\n\n🤖 Generated by AI (truncated)`;
  }
}